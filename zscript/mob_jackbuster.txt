// ------------------------------------------------------------
// I regret nothing.
// ------------------------------------------------------------
class HDJackbuster:HDHumanoid{
	default{
		//$Category "Monsters/Hideous Destructor"
		//$Title "Thunder Buster Guy"
		//$Sprite "TBJKA1"

		seesound "jackbuster/sight";
		painsound "jackbuster/pain";
		deathsound "jackbuster/death";
		activesound "jackbuster/active";
		tag "$TAG_JACKBUSTER";

		speed 10;
		decal "BulletScratch";
		maxtargetrange 4000;
		painchance 200;

		obituary "$OB_JACKBUSTER";
		hitobituary "$OB_JACKBUSTER_HIT";
	}

	override void beginplay(){
		super.beginplay();
		A_SetTranslation("HattedJackboot");
	}

	override void postbeginplay(){
		super.postbeginplay();
			bhashelmet=true;
			for ( int i=0; i<12; i++ )
			{
			reservebattery[i]=randompick(-1,-1,-1,-1,-1,-1,(1*random(1,20)),(1*random(1,20)),(1*random(1,20)));
			}
			battery=random(1,20);
			givearmour(1.,0.06,-0.4);
	}

	override void deathdrop(){
		hdweapon wp=null;
		if(!bhasdropped){
			bhasdropped=true;
			if(wp=hdweapon(spawn("ThunderBuster",pos,ALLOW_REPLACE))){
				if(alt)wp.weaponstatus[0]|=TBF_ALT;
					wp.weaponstatus[TBS_BATTERY]=battery;
				}
		else{
			if(!unloaded){
			let mmm=HDMagAmmo.SpawnMag(self,"HDBattery",battery);
			mmm.vel=vel+(frandom(-1,1),frandom(-1,1),1);
			}
		}
	}
		if(HDTBJ_LimitedBatteries){
			for ( int i=0; i<12; i++ )
			{
				if(reservebattery[i]<0)continue;
				let mmm=HDMagAmmo.SpawnMag(self,"HDBattery",reservebattery[i]);
				mmm.vel=vel+(frandom(-1,1),frandom(-1,1),1);
				reservebattery[i]=-1;
			}
		}
	}
	int battery;
	int reservebattery[12];
	bool alt;
	bool unloaded;

	override void tick(){
		super.tick();
		int totalbatteries=0;
		if(
			!InStateSequence(CurState, ResolveState("FallDown"))
			&&!InStateSequence(CurState, ResolveState("StandUp"))
			&&!InStateSequence(CurState, ResolveState("Raise"))
			&&!InStateSequence(CurState, ResolveState("spawnstretch"))
			&&!InStateSequence(CurState, ResolveState("Missile"))
			&&!InStateSequence(CurState, ResolveState("shootpb"))
			&&!InStateSequence(CurState, ResolveState("shootpb2"))
			&&!InStateSequence(CurState, ResolveState("shootpb2b"))
			&&!InStateSequence(CurState, ResolveState("uhohtbisfuckingempty"))
			&&!InStateSequence(CurState,ResolveState("mustreload"))
			&&!InStateSequence(CurState, ResolveState("Reload"))
			&&!InStateSequence(CurState, ResolveState("Reload2"))
			&&!InStateSequence(CurState, ResolveState("Pain"))
		){
		for ( int i=0; i<12; i++ )
		{
			if(reservebattery[i]>=0)
			totalbatteries++;
		}
		if(HDTBJ_LimitedBatteries&&totalbatteries<=11&&(!(level.time&(1|2|4)))&&health>0&&totalbatteries<=11)A_LookAndFindBattery();
		}
	}

	action void A_LookAndFindBattery(){
		actor bbb;
		blockthingsiterator it=blockthingsiterator.create(self,meleerange);
		while(it.next()){
			bbb=it.thing;
			HDBattery batry=HDBattery(bbb);
			HDJackbuster fucker=HDJackbuster(self);
			if(
					!batry
					||Distance3D(batry)>meleerange
			)continue;
			int totalbatteries=0;
				for ( int i=0; i<12; i++ )
				{
					if(fucker.reservebattery[i]>=0)
					totalbatteries++;
				}
				if((!(level.time&(1|2|4)))&&totalbatteries<=11){
					if(batry&&batry.mags[batry.mags.size()-1]>0){
						int amo=batry.mags[batry.mags.size()-1];
						batry.destroy();
						fucker.A_StartSound("weapons/pocket",CHAN_POCKETS,CHANF_OVERLAP);
						for ( int i=0; i<12; i++ )
						{
							if(fucker.reservebattery[i]<0){
							fucker.reservebattery[i]=amo;
							return;
						}
					}
				}
			}
		}
	}

	void A_ThunderZap(){
		if(battery<1){
			setstatelabel("uhohtbisfuckingempty");
			A_StartSound("weapons/plasmas",CHAN_WEAPON);
			return;
		}
		thunderbuster.thunderzap(self,32,alt,battery);
		if(!random(0,(alt?3:15)))battery--;
	}

	override bool CanDoMissile(
		bool targsight,
		double targdist,
		out statelabel missilestate
	){
		bool hasbattery=false;
		for ( int i=0; i<12; i++ )
		{
			if(reservebattery[i]>=0)
			hasbattery=true;
		}
		return
		(
			hasbattery
			||battery>0
		)&&super.CanDoMissile(targsight,targdist,missilestate);
	}

	states{
	spawn:
		TBJK A 0;
	idle:
	spawn2:
		#### EEEEEE 1{
			A_HDLook();
			vel.xy-=(cos(angle),sin(angle))*frandom(-0.1,0.1);
			A_SetTics(random(1,10));
		}
		#### B 0 A_Jump(132,2,5,5,5,5);
		#### B 8{
			if(!random(0,1)){
				if(!random(0,4)){
					setstatelabel("spawnstretch");
				}else{
					if(bambush)setstatelabel("spawnstill");
					else setstatelabel("spawnwander");
				}
			}else vel.xy-=(cos(angle),sin(angle))*frandom(-0.2,0.2);
		}loop;
	spawnstretch:
		#### G 1{
			vel.xy-=(cos(angle),sin(angle))*frandom(-0.4,0.4);
			A_SetTics(random(30,80));
		}
		#### A 0 A_Vocalize(activesound);
		---- A 0 setstatelabel("spawn2");
	spawnstill:
		#### C 0{
			A_HDLook();
			vel.xy-=(cos(angle),sin(angle))*frandom(-0.4,0.4);
		}
		#### CD 5{angle+=random(-4,4);}
		#### A 0{
			A_HDLook();
			if(!random(0,15))A_Vocalize(activesound);
		}
		#### AB 5{angle+=random(-4,4);}
		#### B 1 A_SetTics(random(10,40));
		---- A 0 setstatelabel("spawn2");
	spawnwander:
		#### CD 5 A_HDWander();
		#### A 0 {
			if(!random(0,15))A_Vocalize(activesound);
			A_HDLook();
		}
		#### AB 5 A_HDWander();
		#### A 0 A_Jump(64,"spawn2");
		loop;

	see:
		#### ABCD 4 A_HDChase();
		#### A 0 A_Jump(116,"roam","roam","roam","roam2","roam2");
		loop;
	roam:
		#### EEEE 3 A_Watch();
		#### A 0 A_Jump(60,"roam");
	roam2:
		#### A 0 A_JumpIf(targetinsight||!random(0,31),"see");
		#### ABCD 6 A_HDChase(speedmult:0.6);
		#### A 0 A_Jump(80,"roam");
		loop;

	missile:
		#### ABCD 3 A_TurnToAim(40,shootstate:"shootpb");
		loop;
	shootpb:
		#### A 0{
		if(HDTBJ_LimitedBatteries){
			bool hasbattery=false;
			for ( int i=0; i<12; i++ )
			{
				if(reservebattery[i]>=0)
				hasbattery=true;
			}
			if(hasbattery&&(unloaded||battery<1))setstatelabel("MustReload");
			else if(!hasbattery&&(unloaded||battery<1))setstatelabel("see");
			}
			else if(unloaded||battery<1)setstatelabel("MustReload");
		}
		TBJK E 1 A_StartAim(mintics:4,maxtics:20,dontlead:true);
		TBJK E random(4,10){
			angle+=frandom(-spread,spread);
			pitch+=frandom(-spread,spread);
			if(!HDMobAI.TryShoot(self,gunheight,max(abs(meleethreshold),lasttargetdist-300))){
				setstatelabel("see");
				return;
			}
			bool checkalt=alt;
			alt=(
				lasttargetdist<666
				||!HDMobAI.TryShoot(self,gunheight,666)
			);
			if(checkalt!=alt)A_StartSound("weapons/plasswitch",8);
		}
		TBJK E random(3,6);
	shootpb2:
		TBJK A 0{
		if(alt)setstatelabel("shootpb2b");
		}
		TBJK EEEEEEE 2 bright{ A_ThunderZap(); A_StartSound("weapons/plasidle");}
		TBJK ############ 2 bright light("PLAZMABX2"){frame=randompick(4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5);}
		TBJK E 2;
		---- A 0 A_Watch();
		---- A 0 setstatelabel("see");
		---- A 0 A_Jump(48,"missile");
		---- A 0 setstatelabel("see");

	uhohtbisfuckingempty:
		TBJK ############ 2 bright light("PLAZMABX2"){frame=randompick(4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5);}
		TBJK E 2;
		---- A 0 setstatelabel("mustreload");

	shootpb2b:
		TBJK EEEEEEEEEEEEE 2{ A_ThunderZap(); A_StartSound("weapons/plasidle");}
		TBJK ############ 2 bright light("PLAZMABX2"){frame=randompick(4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5);}
		TBJK E 2;
		---- A 0 A_Watch();
		---- A 0 setstatelabel("see");
		---- A 0 A_Jump(48,"missile");
		---- A 0 setstatelabel("see");
	mustreload:
	TBJK E 10;
	reload:
		#### A 0{
		if(HDTBJ_LimitedBatteries){
		bool hasbattery=false;
		for ( int i=0; i<12; i++ )
		{
			if(reservebattery[i]>=0)
			hasbattery=true;
		}
		if(hasbattery)setstatelabel("reload2");
		else setstatelabel("see");
			}
		}
		#### A 2 A_HDChase("melee",null,CHF_FLEE);
		#### A 0{if(!unloaded)A_StartSound("weapons/plasopen",8);}
		#### BCD 2 A_HDWander(flags:CHF_FLEE);
		#### A 2{
			A_HDWander();
			if(unloaded)return;

			A_StartSound("weapons/pocket",9);
			A_SpawnProjectile("HDCellpackEmpty",38,0,random(90,120));
				unloaded=true;
		}
		#### BCD 2 A_HDWander(flags:CHF_FLEE);
		#### A 4 A_StartSound("weapons/pocket",9);
		#### BC 4 A_HDWander(flags:CHF_FLEE);
		#### E 6 A_StartSound("weapons/plasload",8);
		#### E 2{
			A_StartSound("weapons/plasclose",8);
			battery=20;
			unloaded=false;
			A_HDWander(flags:CHF_FLEE);
		}
		#### E 4 A_StartSound("weapons/plasclose2",8);
		#### CB 4 A_HDChase("melee",null);
		goto see;

	reload2:
		#### A 0{
		if(HDTBJ_LimitedBatteries){
		bool hasbattery=false;
		for ( int i=0; i<12; i++ )
		{
			if(reservebattery[i]>=0)
			hasbattery=true;
		}
		if(!hasbattery)setstatelabel("see");
			}
		}
		#### A 2 A_HDChase("melee",null,CHF_FLEE);
		#### A 0{if(!unloaded)A_StartSound("weapons/plasopen",8);}
		#### BCD 2 A_HDWander(flags:CHF_FLEE);
		#### A 2{
			A_HDWander();
			if(unloaded)return;

			A_StartSound("weapons/pocket",9);
			A_SpawnProjectile("HDCellpackEmpty",38,0,random(90,120));
				unloaded=true;
		}
		#### BCD 2 A_HDWander(flags:CHF_FLEE);
		#### A 4 A_StartSound("weapons/pocket",9);
		#### BC 4 A_HDWander(flags:CHF_FLEE);
		#### E 6 A_StartSound("weapons/plasload",8);
		#### E 2{
			A_StartSound("weapons/plasclose",8);
			unloaded=false;
			A_HDWander(flags:CHF_FLEE);
			if(HDTBJ_LimitedBatteries){
			for ( int i=0; i<12; i++ )
			{
				if(reservebattery[i]<0)continue;
				battery=reservebattery[i];
				reservebattery[i]=-1;
				return;
			}
			}else battery=random(0,20);
		}
		#### E 4 A_StartSound("weapons/plasclose2",8);
		#### CB 4 A_HDWander(flags:CHF_FLEE);
		goto see;

	pain:
		#### G 3 A_Jump(12,1);
		#### G 3 A_Vocalize(painsound);
		#### G 0{
			if(target&&target.distance3d(self)<abs(meleethreshold)){
				let aaa=spawn("idledummy",target.pos);
				threat=aaa;
				aaa.stamina=35;
			}
		}
		---- A 0 setstatelabel("see");

	death:
		#### H 5;
		#### I 5 A_Vocalize(deathsound);
		#### JK 5;
	dead:
		#### K 3 canraise{if(abs(vel.z)<2.)frame++;}
		#### L 5 canraise{if(abs(vel.z)>=2.)setstatelabel("dead");}
		wait;
	xxxdeath:
		#### O 5;
		#### P 5 A_XScream();
		#### QRSTUV 5;
		goto xdead2;
	xdeath:
		#### O 5;
		#### P 5{
			spawn("MegaBloodSplatter",pos+(0,0,34),ALLOW_REPLACE);
			A_XScream();
		}
		#### QR 5 spawn("MegaBloodSplatter",pos+(0,0,34),ALLOW_REPLACE);
		#### STUV 5;
		goto xdead2;
	xdead2:
		#### V 3 canraise{if(abs(vel.z)<2.)frame++;}
		#### W 5 canraise{if(abs(vel.z)>=2.)setstatelabel("xdead2");}
		wait;
	raise:
		#### A 0{
			alt=false; //in case if AbD is disabled.
		}
		#### L 4 spawn("MegaBloodSplatter",pos+(0,0,34),ALLOW_REPLACE);
		#### LK 6;
		#### JIH 4;
		#### A 0 A_Jump(256,"see");
	ungib:
		#### U 12;
		#### T 8;
		#### SRQ 6;
		#### PON 4;
		#### A 0 A_Jump(256,"see");
	}
}

class DeadJackbuster:HDJackbuster{
	override void postbeginplay(){
		super.postbeginplay();
		A_Die("spawndead");
	}
	states{
	death.spawndead:
		TBJK A 0;
		goto dead;
	}
}